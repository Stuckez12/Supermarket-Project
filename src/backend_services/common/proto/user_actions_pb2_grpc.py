# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import input_output_messages_pb2 as input__output__messages__pb2
import user_actions_pb2 as user__actions__pb2

GRPC_GENERATED_VERSION = '1.70.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in user_actions_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class UserSettingsServiceStub(object):
    """UserSettingsService
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetBasicAccountData = channel.unary_unary(
                '/user_settings.UserSettingsService/GetBasicAccountData',
                request_serializer=user__actions__pb2.GetBasicAccountDetailsRequest.SerializeToString,
                response_deserializer=user__actions__pb2.BasicAccountDetailsResponse.FromString,
                _registered_method=True)
        self.UpdateUserEmail = channel.unary_unary(
                '/user_settings.UserSettingsService/UpdateUserEmail',
                request_serializer=user__actions__pb2.UpdateUserEmailRequest.SerializeToString,
                response_deserializer=input__output__messages__pb2.OTP_Response.FromString,
                _registered_method=True)
        self.UpdateUserPassword = channel.unary_unary(
                '/user_settings.UserSettingsService/UpdateUserPassword',
                request_serializer=user__actions__pb2.UpdateUserPasswordRequest.SerializeToString,
                response_deserializer=input__output__messages__pb2.HTTP_Response.FromString,
                _registered_method=True)
        self.UpdateUserDetails = channel.unary_unary(
                '/user_settings.UserSettingsService/UpdateUserDetails',
                request_serializer=user__actions__pb2.UpdateUserDetailsRequest.SerializeToString,
                response_deserializer=input__output__messages__pb2.HTTP_Response.FromString,
                _registered_method=True)
        self.DeleteAccount = channel.unary_unary(
                '/user_settings.UserSettingsService/DeleteAccount',
                request_serializer=user__actions__pb2.DeleteAccountRequest.SerializeToString,
                response_deserializer=input__output__messages__pb2.HTTP_Response.FromString,
                _registered_method=True)


class UserSettingsServiceServicer(object):
    """UserSettingsService
    """

    def GetBasicAccountData(self, request, context):
        """GetBasicAccountData
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateUserEmail(self, request, context):
        """UpdateUserEmail
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateUserPassword(self, request, context):
        """UpdateUserPassword
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateUserDetails(self, request, context):
        """UpdateUserDetails
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteAccount(self, request, context):
        """DeleteAccount
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UserSettingsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetBasicAccountData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBasicAccountData,
                    request_deserializer=user__actions__pb2.GetBasicAccountDetailsRequest.FromString,
                    response_serializer=user__actions__pb2.BasicAccountDetailsResponse.SerializeToString,
            ),
            'UpdateUserEmail': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateUserEmail,
                    request_deserializer=user__actions__pb2.UpdateUserEmailRequest.FromString,
                    response_serializer=input__output__messages__pb2.OTP_Response.SerializeToString,
            ),
            'UpdateUserPassword': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateUserPassword,
                    request_deserializer=user__actions__pb2.UpdateUserPasswordRequest.FromString,
                    response_serializer=input__output__messages__pb2.HTTP_Response.SerializeToString,
            ),
            'UpdateUserDetails': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateUserDetails,
                    request_deserializer=user__actions__pb2.UpdateUserDetailsRequest.FromString,
                    response_serializer=input__output__messages__pb2.HTTP_Response.SerializeToString,
            ),
            'DeleteAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteAccount,
                    request_deserializer=user__actions__pb2.DeleteAccountRequest.FromString,
                    response_serializer=input__output__messages__pb2.HTTP_Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'user_settings.UserSettingsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('user_settings.UserSettingsService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class UserSettingsService(object):
    """UserSettingsService
    """

    @staticmethod
    def GetBasicAccountData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/user_settings.UserSettingsService/GetBasicAccountData',
            user__actions__pb2.GetBasicAccountDetailsRequest.SerializeToString,
            user__actions__pb2.BasicAccountDetailsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateUserEmail(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/user_settings.UserSettingsService/UpdateUserEmail',
            user__actions__pb2.UpdateUserEmailRequest.SerializeToString,
            input__output__messages__pb2.OTP_Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateUserPassword(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/user_settings.UserSettingsService/UpdateUserPassword',
            user__actions__pb2.UpdateUserPasswordRequest.SerializeToString,
            input__output__messages__pb2.HTTP_Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateUserDetails(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/user_settings.UserSettingsService/UpdateUserDetails',
            user__actions__pb2.UpdateUserDetailsRequest.SerializeToString,
            input__output__messages__pb2.HTTP_Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/user_settings.UserSettingsService/DeleteAccount',
            user__actions__pb2.DeleteAccountRequest.SerializeToString,
            input__output__messages__pb2.HTTP_Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
